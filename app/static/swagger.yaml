swagger: "2.0"
info:
  title: "Mechanic Shop API"
  description: "API for managing mechanics, customers, inventory, and service tickets."
  version: "1.0.0"
host: "mechanic-shop-2-0-1.onrender.com" # render name: "your-app-name.onrender.com"
schemes:
  - "https"
basePath: "/"
securityDefinitions:
  BearerAuth:
    type: apiKey
    swagger: "2.0"
    in: header
    description: "JWT token using Bearer token number. Example: 'Bearer {token number}'"
paths:
  /inventory/mechanic/:
    get:
      tags: [Inventory]
      summary: "Mechanic gets paginated list of parts with pricing"
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          type: integer
        - name: per_page
          in: query
          type: integer
      responses:
        200:
          description: "List of parts with pricing"
        400:
          description: "Bad request"
        500:
          description: "Internal server error"
  /inventory/mechanic/{id}:
    get:
      tags: [Inventory]
      summary: "Mechanic gets part by id with pricing"
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      responses:
        200:
          description: "Part details with pricing"
        404:
          description: "Not found"
        500:
          description: "Internal server error"
  /inventory/:
    post:
      tags:
        - Inventory
      summary: Mechanic adds a new part
      security:
        - BearerAuth: []
      parameters:
        - in: body
          name: part
          required: true
          schema:
            $ref: '#/definitions/InventoryItem'
      responses:
        201:
          description: Part added
        400:
          description: Bad request
    get:
      tags:
        - Inventory
      summary: Public gets paginated list of parts
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          required: false
        - name: per_page
          in: query
          schema:
            type: integer
          required: false
      responses:
        '200':
          description: List of parts
        '400':
          description: Bad request
  /inventory/{id}:
    get:
      tags:
        - Inventory
      summary: Public gets part by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Part details
        '404':
          description: Not found
    put:
      tags:
        - Inventory
      summary: Mechanic updates part
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - in: body
          name: part
          required: true
          schema:
            $ref: '#/definitions/InventoryItem'
      responses:
        200:
          description: Part updated
        400:
          description: Bad request
    delete:
      tags:
        - Inventory
      summary: Mechanic deletes part
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Part deleted
        '400':
          description: Bad request
  /inventory/search:
    get:
      tags:
        - Inventory
      summary: Public searches parts
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
        - name: limit
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Search results
        '400':
          description: Bad request
  /inventory/mechanic/search:
    get:
      tags:
        - Inventory
      summary: Mechanic searches part by name
      security:
        - BearerAuth: []
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Search result
        '400':
          description: Bad request
        '404':
          description: Not found
  /inventory/low-stock:
    get:
      tags:
        - Inventory
      summary: Mechanic gets low stock parts
      security:
        - BearerAuth: []
      parameters:
        - name: threshold
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: List of low stock parts
        '400':
          description: Bad request
  /service-tickets/mechanic/create:
    post:
      tags:
        - ServiceTicket
      summary: Mechanic creates a service ticket
      security:
        - BearerAuth: []
      parameters:
        - in: body
          name: ticket
          required: true
          schema:
            $ref: '#/definitions/ServiceTicketCreate'
      responses:
        201:
          description: Ticket created
        400:
          description: Bad request
  /service-tickets/:
    get:
      tags:
        - ServiceTicket
      summary: Admin gets all service tickets
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of tickets
        '500':
          description: Server error
  /service-tickets/{ticket_id}:
    get:
      tags:
        - ServiceTicket
      summary: Admin gets ticket by id
      security:
        - BearerAuth: []
      parameters:
        - name: ticket_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Ticket details
        '500':
          description: Server error
  /service-tickets/{ticket_id}/mechanics:
    get:
      tags:
        - ServiceTicket
      summary: Mechanic gets mechanics for ticket
      security:
        - BearerAuth: []
      parameters:
        - name: ticket_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of mechanics
        '500':
          description: Server error
  /service-tickets/mechanic/{mechanic_id}/count:
    get:
      tags:
        - ServiceTicket
      summary: Admin gets ticket count for mechanic
      security:
        - BearerAuth: []
      parameters:
        - name: mechanic_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Ticket count for mechanic
        '500':
          description: Server error
  /service-tickets/customer/{customer_id}/count:
    get:
      tags:
        - ServiceTicket
      summary: Admin gets ticket count for customer (paginated)
      security:
        - BearerAuth: []
      parameters:
        - name: customer_id
          in: path
          required: true
          schema:
            type: integer
        - name: page
          in: query
          required: false
          schema:
            type: integer
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Ticket count for customer
        '500':
          description: Server error
  /service-tickets/customer/my-tickets:
    get:
      tags:
        - ServiceTicket
      summary: Customer gets own tickets (paginated)
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: List of own tickets
        '500':
          description: Server error
  /service-tickets/mechanic/my-tickets:
    get:
      tags:
        - ServiceTicket
      summary: Mechanic gets own assigned tickets (paginated, status filter)
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
        - name: status
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of assigned tickets
        '500':
          description: Server error
  /service-tickets/{ticket_id}/assign-mechanic/{mechanic_id}:
    put:
      tags:
        - ServiceTicket
      summary: Assign mechanic to ticket
      security:
        - BearerAuth: []
      parameters:
        - name: ticket_id
          in: path
          required: true
          schema:
            type: integer
        - name: mechanic_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Mechanic assigned
        '403':
          description: Forbidden
        '500':
          description: Server error
  /service-tickets/{ticket_id}/remove-mechanic/{mechanic_id}:
    put:
      tags:
        - ServiceTicket
      summary: Remove mechanic from ticket
      security:
        - BearerAuth: []
      parameters:
        - name: ticket_id
          in: path
          required: true
          schema:
            type: integer
        - name: mechanic_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Mechanic removed
        '403':
          description: Forbidden
        '500':
          description: Server error
  /service-tickets/{ticket_id}/add-part/{inventory_id}:
    put:
      tags:
        - ServiceTicket
      summary: Add part to ticket
      security:
        - BearerAuth: []
      parameters:
        - name: ticket_id
          in: path
          required: true
          schema:
            type: integer
        - name: inventory_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Part added
        '403':
          description: Forbidden
        '500':
          description: Server error
  /service-tickets/{ticket_id}/remove-part/{inventory_id}:
    put:
      tags:
        - ServiceTicket
      summary: Remove part from ticket
      security:
        - BearerAuth: []
      parameters:
        - name: ticket_id
          in: path
          required: true
          schema:
            type: integer
        - name: inventory_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Part removed
        '403':
          description: Forbidden
        '500':
          description: Server error
  /service-tickets/{ticket_id}/status:
    put:
      tags:
        - ServiceTicket
      summary: Update ticket status
      security:
        - BearerAuth: []
      put:
        tags:
          - ServiceTicket
        summary: Update ticket status
        parameters:
          - name: ticket_id
            in: path
            required: true
            schema:
              type: integer
          - in: body
            name: status
            required: true
            schema:
              $ref: '#/definitions/ServiceTicketUpdate'
        responses:
          200:
            description: Status updated
          400:
            description: Bad request
          500:
            description: Server error
    get:
      tags: [Mechanics]
      summary: "Get mechanics (paginated)"
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          type: integer
        - name: per_page
          in: query
          type: integer
      responses:
        200:
          description: "Paginated list of mechanics"
        400:
          description: "Invalid pagination number"
        500:
          description: "Internal server error"
    /mechanics/admin/add:
    post:
      tags: [Mechanics]
      summary: "Admin add mechanic"
      security:
        - BearerAuth: []
      parameters:
        - in: body
          name: mechanic
          required: true
          schema:
            $ref: "#/definitions/MechanicCreate"
      responses:
        201:
          description: "Mechanic added by admin"
        400:
          description: "Invalid input"
        409:
          description: "Mechanic already exists"
        500:
          description: "Internal server error"
  /mechanics/login:
    post:
      tags: [Mechanics]
      summary: "Mechanic login"
      parameters:
        - in: body
          name: credentials
          required: true
          schema:
            $ref: "#/definitions/MechanicLogin"
      responses:
        200:
          description: "Login successful (JWT token returned)"
        401:
          description: "Invalid credentials"
        500:
          description: "Internal server error"
  /mechanics/my-tickets:
    get:
      tags: [Mechanics]
      summary: "Get my assigned tickets"
      security:
        - BearerAuth: []
      responses:
        200:
          description: "List of tickets assigned to mechanic"
        401:
          description: "Unauthorized"
        500:
          description: "Internal server error"
  /mechanics/{id}:
    get:
      tags: [Mechanics]
      summary: "Get mechanic by ID"
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      responses:
        200:
          description: "Mechanic details"
        404:
          description: "Mechanic not found"
        500:
          description: "Internal server error"
    put:
      tags: [Mechanics]
      summary: "Update mechanic profile"
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          type: integer
        - in: body
          name: mechanic
          required: true
          schema:
            $ref: "#/definitions/MechanicUpdate"
      responses:
        200:
          description: "Mechanic updated"
        400:
          description: "Invalid input"
        403:
          description: "Forbidden"
        404:
          description: "Mechanic not found"
        500:
          description: "Internal server error"
    delete:
      tags: [Mechanics]
      summary: "Delete mechanic (admin only)"
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      responses:
        200:
          description: "Mechanic deleted"
        404:
          description: "Mechanic not found"
        500:
          description: "Internal server error"
  /mechanics/profile:
    get:
      tags: [Mechanics]
      summary: "Get own mechanic profile"
      security:
        - BearerAuth: []
      responses:
        200:
          description: "Mechanic profile"
        401:
          description: "Unauthorized"
        500:
          description: "Internal server error"
  /mechanics/dashboard:
    get:
      tags: [Mechanics]
      summary: "Get mechanic dashboard information"
      security:
        - BearerAuth: []
      responses:
        200:
          description: "Dashboard data with tickets & stats"
        401:
          description: "Unauthorized"
        500:
          description: "Internal server error"
  /mechanics/secure-data:
    get:
      tags: [Mechanics]
      summary: "Access secure data"
      security:
        - BearerAuth: []
      responses:
        200:
          description: "Protected mechanic information"
        401:
          description: "Unauthorized"
        500:
          description: "Internal server error"
  /mechanics/change-password:
    put:
      tags: [Mechanics]
      summary: "Change mechanic password"
      security:
        - BearerAuth: []
      parameters:
        - in: body
          name: passwords
          required: true
          schema:
            $ref: "#/definitions/PasswordChange"
      responses:
        200:
          description: "Password successfully changed"
        401:
          description: "Old password is incorrect"
        500:
          description: "Internal server error"
  /mechanics/admin/update/{id}:
    put:
      tags: [Mechanics]
      summary: "Admin update mechanic"
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          type: integer
        - in: body
          name: mechanic
          required: true
          schema:
            $ref: "#/definitions/MechanicUpdate"
      responses:
        200:
          description: "Mechanic updated by admin"
        404:
          description: "Mechanic not found"
        500:
          description: "Internal server error"
  /mechanics/admin/create:
    post:
      tags: [Mechanics]
      summary: "Create admin"
      security:
        - BearerAuth: []
      parameters:
        - in: body
          name: admin
          required: true
          schema:
            $ref: "#/definitions/AdminCreate"
      responses:
        201:
          description: "Admin created"
        409:
          description: "Admin already exists"
        500:
          description: "Internal server error"
  /mechanics/admin/login:
    post:
      tags: [Mechanics]
      summary: "Admin login"
      parameters:
        - in: body
          name: adminLogin
          required: true
          schema:
            $ref: "#/definitions/AdminLogin"
      responses:
        200:
          description: "Admin login successful"
        401:
          description: "Invalid admin credentials"
        500:
          description: "Internal server error"
  /customers/:
    post:
      tags: [Customers]
      summary: "Create customer (admin only)"
      security:
        - BearerAuth: []
      parameters:
        - in: body
          name: customer
          required: true
          schema:
            $ref: "#/definitions/CustomerRegister"
      responses:
        201:
          description: "Customer created"
        400:
          description: "Invalid input"
        409:
          description: "Email already exists"
        500:
          description: "Internal server error"
  /customers/login:
    post:
      tags: [Customers]
      summary: "Customer login"
      parameters:
        - in: body
          name: credentials
          required: true
          schema:
            $ref: "#/definitions/CustomerLogin"
      responses:
        200:
          description: "Login successful (JWT token returned)"
        401:
          description: "Invalid credentials"
        500:
          description: "Internal server error"
  /customers/register:
    post:
      tags: [Customers]
      summary: "Register new customer (public)"
      parameters:
        - in: body
          name: customer
          required: true
          schema:
            $ref: "#/definitions/CustomerRegister"
      responses:
        201:
          description: "Customer registered"
        400:
          description: "Invalid input"
        409:
          description: "Email already exists"
        500:
          description: "Internal server error"
  /customers/my-tickets:
    get:
      tags: [Customers]
      summary: "Get tickets for current customer"
      security:
        - BearerAuth: []
      responses:
        200:
          description: "List of tickets"
        401:
          description: "Unauthorized"
        500:
          description: "Internal server error"
  /customers/{id}:
    get:
      tags: [Customers]
      summary: "Get own customer profile"
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      responses:
        200:
          description: "Customer profile"
        403:
          description: "Forbidden"
        404:
          description: "Customer not found"
        500:
          description: "Internal server error"
    put:
      tags: [Customers]
      summary: "Update own customer profile"
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          type: integer
        - in: body
          name: customer
          required: true
          schema:
            $ref: "#/definitions/CustomerRegister"
      responses:
        200:
          description: "Customer updated"
        400:
          description: "Invalid input"
        403:
          description: "Forbidden"
        404:
          description: "Customer not found"
        500:
          description: "Internal server error"
  /customers/admin/{id}:
    get:
      tags: [Customers]
      summary: "Admin gets customer by id"
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      responses:
        200:
          description: "Customer profile"
        404:
          description: "Customer not found"
        500:
          description: "Internal server error"
  /customers/admin/update/{id}:
    put:
      tags: [Customers]
      summary: "Admin updates customer"
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          type: integer
        - in: body
          name: customer
          required: true
          schema:
            $ref: "#/definitions/CustomerRegister"
      responses:
        200:
          description: "Customer updated"
        400:
          description: "Invalid input"
        404:
          description: "Customer not found"
        500:
          description: "Internal server error"
  /customers/admin/delete/{id}:
    delete:
      tags: [Customers]
      summary: "Admin deletes customer"
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      responses:
        200:
          description: "Customer deleted"
        404:
          description: "Customer not found"
        500:
          description: "Internal server error"
definitions:
  PublicInventoryItem:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      quantity:
        type: integer
  MechanicCreate:
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      phone:
        type: string
      address:
        type: string
      hours_worked:
        type: integer
      password:
        type: string
    required:
      - name
      - email
      - phone
  MechanicLogin:
    type: object
    properties:
      email:
        type: string
      password:
        type: string
    required:
      - email
      - password
  MechanicUpdate:
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      phone:
        type: string
      address:
        type: string
  PasswordChange:
    type: object
    properties:
      old_password:
        type: string
      new_password:
        type: string
    required:
      - old_password
      - new_password
  AdminCreate:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
    required:
      - username
      - password
  AdminLogin:
    type: object
    properties:
      username:
        type: string
        example: "admin"
      password:
        type: string
        example: "admin123"
    required:
      - username
      - password
  CustomerLogin:
    type: object
    properties:
      email:
        type: string
      password:
        type: string
    required:
      - email
      - password
  CustomerRegister:
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      phone:
        type: string
      password:
        type: string
    required:
      - name
      - email
      - phone
      - password
  InventoryItem:
    type: object
    properties:
      name:
        type: string
      price:
        type: number
      quantity:
        type: integer
    required:
      - name
      - price
  ServiceTicketCreate:
    type: object
    properties:
      customer_id:
        type: integer
      description:
        type: string
    required:
      - customer_id
      - description
  ServiceTicketUpdate:
    type: object
    properties:
      status:
        type: string
      notes:
        type: string
  CustomerResponse:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      email:
        type: string
      phone:
        type: string
